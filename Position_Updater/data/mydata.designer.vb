'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Transport_TEST")>  _
Partial Public Class mydataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertVehicleBase(instance As VehicleBase)
    End Sub
  Partial Private Sub UpdateVehicleBase(instance As VehicleBase)
    End Sub
  Partial Private Sub DeleteVehicleBase(instance As VehicleBase)
    End Sub
  Partial Private Sub InsertActiveFleetfence(instance As ActiveFleetfence)
    End Sub
  Partial Private Sub UpdateActiveFleetfence(instance As ActiveFleetfence)
    End Sub
  Partial Private Sub DeleteActiveFleetfence(instance As ActiveFleetfence)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Position_Updater.My.MySettings.Default.Transport_TESTConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property VehicleBases() As System.Data.Linq.Table(Of VehicleBase)
		Get
			Return Me.GetTable(Of VehicleBase)
		End Get
	End Property
	
	Public ReadOnly Property GPSPositions() As System.Data.Linq.Table(Of GPSPosition)
		Get
			Return Me.GetTable(Of GPSPosition)
		End Get
	End Property
	
	Public ReadOnly Property fridgeTrailers() As System.Data.Linq.Table(Of fridgeTrailer)
		Get
			Return Me.GetTable(Of fridgeTrailer)
		End Get
	End Property
	
	Public ReadOnly Property ActiveFleetfences() As System.Data.Linq.Table(Of ActiveFleetfence)
		Get
			Return Me.GetTable(Of ActiveFleetfence)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.VehicleBase")>  _
Partial Public Class VehicleBase
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _szRegistration As String
	
	Private _dwVehicleId As Integer
	
	Private _dwClassificationIdFK As System.Nullable(Of Integer)
	
	Private _vehClass As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnszRegistrationChanging(value As String)
    End Sub
    Partial Private Sub OnszRegistrationChanged()
    End Sub
    Partial Private Sub OndwVehicleIdChanging(value As Integer)
    End Sub
    Partial Private Sub OndwVehicleIdChanged()
    End Sub
    Partial Private Sub OndwClassificationIdFKChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OndwClassificationIdFKChanged()
    End Sub
    Partial Private Sub OnvehClassChanging(value As String)
    End Sub
    Partial Private Sub OnvehClassChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_szRegistration", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property szRegistration() As String
		Get
			Return Me._szRegistration
		End Get
		Set
			If (String.Equals(Me._szRegistration, value) = false) Then
				Me.OnszRegistrationChanging(value)
				Me.SendPropertyChanging
				Me._szRegistration = value
				Me.SendPropertyChanged("szRegistration")
				Me.OnszRegistrationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwVehicleId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property dwVehicleId() As Integer
		Get
			Return Me._dwVehicleId
		End Get
		Set
			If ((Me._dwVehicleId = value)  _
						= false) Then
				Me.OndwVehicleIdChanging(value)
				Me.SendPropertyChanging
				Me._dwVehicleId = value
				Me.SendPropertyChanged("dwVehicleId")
				Me.OndwVehicleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwClassificationIdFK", DbType:="Int")>  _
	Public Property dwClassificationIdFK() As System.Nullable(Of Integer)
		Get
			Return Me._dwClassificationIdFK
		End Get
		Set
			If (Me._dwClassificationIdFK.Equals(value) = false) Then
				Me.OndwClassificationIdFKChanging(value)
				Me.SendPropertyChanging
				Me._dwClassificationIdFK = value
				Me.SendPropertyChanged("dwClassificationIdFK")
				Me.OndwClassificationIdFKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_vehClass", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property vehClass() As String
		Get
			Return Me._vehClass
		End Get
		Set
			If (String.Equals(Me._vehClass, value) = false) Then
				Me.OnvehClassChanging(value)
				Me.SendPropertyChanging
				Me._vehClass = value
				Me.SendPropertyChanged("vehClass")
				Me.OnvehClassChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.GPSPosition")>  _
Partial Public Class GPSPosition
	
	Private _LatLong As String
	
	Private _dateoffix As System.Nullable(Of Date)
	
	Private _Location As String
	
	Private _TrackedBY As String
	
	Private _VehID As Integer
	
	Private _Status As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LatLong", DbType:="NVarChar(120)")>  _
	Public Property LatLong() As String
		Get
			Return Me._LatLong
		End Get
		Set
			If (String.Equals(Me._LatLong, value) = false) Then
				Me._LatLong = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateoffix", DbType:="DateTime")>  _
	Public Property dateoffix() As System.Nullable(Of Date)
		Get
			Return Me._dateoffix
		End Get
		Set
			If (Me._dateoffix.Equals(value) = false) Then
				Me._dateoffix = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(250)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me._Location = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TrackedBY", DbType:="NVarChar(25)")>  _
	Public Property TrackedBY() As String
		Get
			Return Me._TrackedBY
		End Get
		Set
			If (String.Equals(Me._TrackedBY, value) = false) Then
				Me._TrackedBY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VehID", DbType:="Int NOT NULL")>  _
	Public Property VehID() As Integer
		Get
			Return Me._VehID
		End Get
		Set
			If ((Me._VehID = value)  _
						= false) Then
				Me._VehID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.fridgeTrailers")>  _
Partial Public Class fridgeTrailer
	
	Private _dwTrailerId As Integer
	
	Private _szTrailerCode As String
	
	Private _szDescription As String
	
	Private _dwAnalysis1IdFK As System.Nullable(Of Integer)
	
	Private _szModel As String
	
	Private _dwAnalysis2IdFK As System.Nullable(Of Integer)
	
	Private _dwAnalysis3IdFK As System.Nullable(Of Integer)
	
	Private _dwAnalysis4IdFK As System.Nullable(Of Integer)
	
	Private _dwClassificationIdFK As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwTrailerId", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property dwTrailerId() As Integer
		Get
			Return Me._dwTrailerId
		End Get
		Set
			If ((Me._dwTrailerId = value)  _
						= false) Then
				Me._dwTrailerId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_szTrailerCode", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property szTrailerCode() As String
		Get
			Return Me._szTrailerCode
		End Get
		Set
			If (String.Equals(Me._szTrailerCode, value) = false) Then
				Me._szTrailerCode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_szDescription", DbType:="VarChar(30)")>  _
	Public Property szDescription() As String
		Get
			Return Me._szDescription
		End Get
		Set
			If (String.Equals(Me._szDescription, value) = false) Then
				Me._szDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwAnalysis1IdFK", DbType:="Int")>  _
	Public Property dwAnalysis1IdFK() As System.Nullable(Of Integer)
		Get
			Return Me._dwAnalysis1IdFK
		End Get
		Set
			If (Me._dwAnalysis1IdFK.Equals(value) = false) Then
				Me._dwAnalysis1IdFK = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_szModel", DbType:="VarChar(15)")>  _
	Public Property szModel() As String
		Get
			Return Me._szModel
		End Get
		Set
			If (String.Equals(Me._szModel, value) = false) Then
				Me._szModel = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwAnalysis2IdFK", DbType:="Int")>  _
	Public Property dwAnalysis2IdFK() As System.Nullable(Of Integer)
		Get
			Return Me._dwAnalysis2IdFK
		End Get
		Set
			If (Me._dwAnalysis2IdFK.Equals(value) = false) Then
				Me._dwAnalysis2IdFK = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwAnalysis3IdFK", DbType:="Int")>  _
	Public Property dwAnalysis3IdFK() As System.Nullable(Of Integer)
		Get
			Return Me._dwAnalysis3IdFK
		End Get
		Set
			If (Me._dwAnalysis3IdFK.Equals(value) = false) Then
				Me._dwAnalysis3IdFK = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwAnalysis4IdFK", DbType:="Int")>  _
	Public Property dwAnalysis4IdFK() As System.Nullable(Of Integer)
		Get
			Return Me._dwAnalysis4IdFK
		End Get
		Set
			If (Me._dwAnalysis4IdFK.Equals(value) = false) Then
				Me._dwAnalysis4IdFK = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwClassificationIdFK", DbType:="Int")>  _
	Public Property dwClassificationIdFK() As System.Nullable(Of Integer)
		Get
			Return Me._dwClassificationIdFK
		End Get
		Set
			If (Me._dwClassificationIdFK.Equals(value) = false) Then
				Me._dwClassificationIdFK = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ActiveFleetfence")>  _
Partial Public Class ActiveFleetfence
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Description As String
	
	Private _username As String
	
	Private _password As String
	
	Private _active As Byte
	
	Private _dwaccountidfk As Integer
	
	Private _szaccountname As String
	
	Private _dateadded As Date
	
	Private _GBAcompany As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnactiveChanging(value As Byte)
    End Sub
    Partial Private Sub OnactiveChanged()
    End Sub
    Partial Private Sub OndwaccountidfkChanging(value As Integer)
    End Sub
    Partial Private Sub OndwaccountidfkChanged()
    End Sub
    Partial Private Sub OnszaccountnameChanging(value As String)
    End Sub
    Partial Private Sub OnszaccountnameChanged()
    End Sub
    Partial Private Sub OndateaddedChanging(value As Date)
    End Sub
    Partial Private Sub OndateaddedChanged()
    End Sub
    Partial Private Sub OnGBAcompanyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGBAcompanyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(100)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_active", DbType:="TinyInt NOT NULL")>  _
	Public Property active() As Byte
		Get
			Return Me._active
		End Get
		Set
			If ((Me._active = value)  _
						= false) Then
				Me.OnactiveChanging(value)
				Me.SendPropertyChanging
				Me._active = value
				Me.SendPropertyChanged("active")
				Me.OnactiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dwaccountidfk", DbType:="Int NOT NULL")>  _
	Public Property dwaccountidfk() As Integer
		Get
			Return Me._dwaccountidfk
		End Get
		Set
			If ((Me._dwaccountidfk = value)  _
						= false) Then
				Me.OndwaccountidfkChanging(value)
				Me.SendPropertyChanging
				Me._dwaccountidfk = value
				Me.SendPropertyChanged("dwaccountidfk")
				Me.OndwaccountidfkChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_szaccountname", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property szaccountname() As String
		Get
			Return Me._szaccountname
		End Get
		Set
			If (String.Equals(Me._szaccountname, value) = false) Then
				Me.OnszaccountnameChanging(value)
				Me.SendPropertyChanging
				Me._szaccountname = value
				Me.SendPropertyChanged("szaccountname")
				Me.OnszaccountnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateadded", DbType:="DateTime NOT NULL")>  _
	Public Property dateadded() As Date
		Get
			Return Me._dateadded
		End Get
		Set
			If ((Me._dateadded = value)  _
						= false) Then
				Me.OndateaddedChanging(value)
				Me.SendPropertyChanging
				Me._dateadded = value
				Me.SendPropertyChanged("dateadded")
				Me.OndateaddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GBAcompany", DbType:="Int")>  _
	Public Property GBAcompany() As System.Nullable(Of Integer)
		Get
			Return Me._GBAcompany
		End Get
		Set
			If (Me._GBAcompany.Equals(value) = false) Then
				Me.OnGBAcompanyChanging(value)
				Me.SendPropertyChanging
				Me._GBAcompany = value
				Me.SendPropertyChanged("GBAcompany")
				Me.OnGBAcompanyChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
